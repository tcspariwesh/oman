## üßÆ 1. **Print Even or Odd**

```csharp
using System;

class Program
{
    static void Main()
    {
        int number = 7;

        if (number % 2 == 0)
        {
            Console.WriteLine("Even");
        }
        else
        {
            Console.WriteLine("Odd");
        }
    }
}
```

**Explanation:**

* `%` is the modulus operator; it gives the remainder.
* If a number is divisible by 2 (`number % 2 == 0`), it's even.

---

## üîÅ 2. **Print Numbers from 1 to 10 Using a Loop**

```csharp
using System;

class Program
{
    static void Main()
    {
        for (int i = 1; i <= 10; i++)
        {
            Console.WriteLine(i);
        }
    }
}
```

**Explanation:**

* A `for` loop initializes `i`, checks the condition `i <= 10`, and increments `i` by 1 in each iteration.
* It prints values from 1 to 10.

---

## ‚ûï 3. **Method to Add Two Numbers**

```csharp
using System;

class Program
{
    static void Main()
    {
        int sum = Add(5, 3);
        Console.WriteLine("Sum is " + sum);
    }

    static int Add(int a, int b)
    {
        return a + b;
    }
}
```

**Explanation:**

* `Add` is a method that takes two integers and returns their sum.
* The `Main` method calls `Add` and prints the result.

---

## üìê 4. **Check if a Number is Prime**

```csharp
using System;

class Program
{
    static void Main()
    {
        int num = 7;
        bool isPrime = true;

        if (num <= 1)
            isPrime = false;
        else
        {
            for (int i = 2; i <= Math.Sqrt(num); i++)
            {
                if (num % i == 0)
                {
                    isPrime = false;
                    break;
                }
            }
        }

        Console.WriteLine(isPrime ? "Prime" : "Not Prime");
    }
}
```

**Explanation:**

* A number is **prime** if it's greater than 1 and has no divisors other than 1 and itself.
* We check divisibility up to the square root of the number for efficiency.

---

## üìã 5. **Using a Switch Statement**

```csharp
using System;

class Program
{
    static void Main()
    {
        int day = 3;

        switch (day)
        {
            case 1:
                Console.WriteLine("Monday");
                break;
            case 2:
                Console.WriteLine("Tuesday");
                break;
            case 3:
                Console.WriteLine("Wednesday");
                break;
            default:
                Console.WriteLine("Other day");
                break;
        }
    }
}
```

**Explanation:**

* `switch` is used when you have multiple conditions based on the value of a variable.
* `break` exits the switch after a match is found.

---

## üë• 6. **Simple Class and Object**

```csharp
using System;

class Person
{
    public string Name;
    public int Age;

    public void SayHello()
    {
        Console.WriteLine($"Hi, I‚Äôm {Name} and I‚Äôm {Age} years old.");
    }
}

class Program
{
    static void Main()
    {
        Person p = new Person();
        p.Name = "Alice";
        p.Age = 30;
        p.SayHello();
    }
}
```

**Explanation:**

* `Person` is a class with fields and a method.
* An object `p` is created and its fields are set, then a method is called on it.
-----------------------------------------------------------------
Great! Let‚Äôs dive deeper with **C# practice examples** in these areas:

---

## üî¢ 1. **Arrays and Lists**

### ‚úÖ Example: Find the Maximum Number in an Array

```csharp
using System;

class Program
{
    static void Main()
    {
        int[] numbers = { 3, 8, 2, 15, 6 };
        int max = numbers[0];

        foreach (int num in numbers)
        {
            if (num > max)
            {
                max = num;
            }
        }

        Console.WriteLine("Maximum number is: " + max);
    }
}
```

**Explanation:**

* Loops through the array, updates `max` when it finds a bigger number.

---

## üìÉ 2. **List Example: Add and Display Names**

```csharp
using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
        List<string> names = new List<string>();

        names.Add("Alice");
        names.Add("Bob");
        names.Add("Charlie");

        foreach (string name in names)
        {
            Console.WriteLine(name);
        }
    }
}
```

**Explanation:**

* `List<T>` is a dynamic array from `System.Collections.Generic`.
* You can `.Add()`, `.Remove()`, etc.

---

## üìÅ 3. **File I/O (Reading and Writing to Files)**

### ‚úÖ Example: Write and Read from a Text File

```csharp
using System;
using System.IO;

class Program
{
    static void Main()
    {
        string path = "example.txt";

        // Write to file
        File.WriteAllText(path, "Hello from C#!");

        // Read from file
        string content = File.ReadAllText(path);
        Console.WriteLine(content);
    }
}
```

**Explanation:**

* `File.WriteAllText` and `File.ReadAllText` handle file I/O.
* Make sure you have write permissions in the folder.

---

## üë™ 4. **Inheritance and Polymorphism**

### ‚úÖ Example: Base and Derived Classes

```csharp
using System;

class Animal
{
    public virtual void Speak()
    {
        Console.WriteLine("The animal makes a sound");
    }
}

class Dog : Animal
{
    public override void Speak()
    {
        Console.WriteLine("The dog barks");
    }
}
class Program
{
    static void Main()
    {
        Animal myAnimal = new Dog();
        myAnimal.Speak();  // Outputs: The dog barks
    }
}
```
**Explanation:**

* `virtual` allows a method to be overridden.
* `override` replaces the base class implementation.
* This is **runtime polymorphism**.
---
## üßπ 5. **LINQ (Language Integrated Query)**
### ‚úÖ Example: Filter Even Numbers Using LINQ
```csharp
using System;
using System.Linq;

class Program
{
    static void Main()
    {
        int[] numbers = { 1, 2, 3, 4, 5, 6 };

        var evens = numbers.Where(n => n % 2 == 0);

        foreach (var n in evens)
        {
            Console.WriteLine(n);
        }
    }
}
```
**Explanation:**
* `Where` is a LINQ method that filters collections.
* `n => n % 2 == 0` is a lambda expression (anonymous function).
--- End of Day --------
